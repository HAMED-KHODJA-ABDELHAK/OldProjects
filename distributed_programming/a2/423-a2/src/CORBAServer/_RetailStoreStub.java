package CORBAServer;


/**
* CORBAServer/_RetailStoreStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/starcraftman/programming/423DistributedProject/a2/423-a2/src/corba/base/interface.idl
* Sunday, November 4, 2012 6:35:54 o'clock AM EST
*/


/* Attempting to stay somewhat close to my original design.	*/
public class _RetailStoreStub extends org.omg.CORBA.portable.ObjectImpl implements CORBAServer.RetailStore
{

  public CORBAServer.Result_s buyItems (String cID, int itemID, int numItems, String initStore) throws CORBAServer.CorbaNotEnoughStockException, CORBAServer.CorbaIOException, CORBAServer.CorbaInterruptedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("buyItems", true);
                $out.write_string (cID);
                $out.write_long (itemID);
                $out.write_long (numItems);
                $out.write_string (initStore);
                $in = _invoke ($out);
                CORBAServer.Result_s $result = CORBAServer.Result_tHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CORBAServer/CorbaNotEnoughStockException:1.0"))
                    throw CORBAServer.CorbaNotEnoughStockExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CORBAServer/CorbaIOException:1.0"))
                    throw CORBAServer.CorbaIOExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CORBAServer/CorbaInterruptedException:1.0"))
                    throw CORBAServer.CorbaInterruptedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return buyItems (cID, itemID, numItems, initStore        );
            } finally {
                _releaseReply ($in);
            }
  } // buyItems

  public CORBAServer.Result_s returnItems (String cID, int itemID, int numItems) throws CORBAServer.CorbaIOException, CORBAServer.CorbaInterruptedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("returnItems", true);
                $out.write_string (cID);
                $out.write_long (itemID);
                $out.write_long (numItems);
                $in = _invoke ($out);
                CORBAServer.Result_s $result = CORBAServer.Result_tHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CORBAServer/CorbaIOException:1.0"))
                    throw CORBAServer.CorbaIOExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CORBAServer/CorbaInterruptedException:1.0"))
                    throw CORBAServer.CorbaInterruptedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return returnItems (cID, itemID, numItems        );
            } finally {
                _releaseReply ($in);
            }
  } // returnItems

  public CORBAServer.Result_s exchange (String cID, int bItemID, int bNumItems, int dItemID, int dNumItems) throws CORBAServer.CorbaNotEnoughStockException, CORBAServer.CorbaIOException, CORBAServer.CorbaInterruptedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("exchange", true);
                $out.write_string (cID);
                $out.write_long (bItemID);
                $out.write_long (bNumItems);
                $out.write_long (dItemID);
                $out.write_long (dNumItems);
                $in = _invoke ($out);
                CORBAServer.Result_s $result = CORBAServer.Result_tHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CORBAServer/CorbaNotEnoughStockException:1.0"))
                    throw CORBAServer.CorbaNotEnoughStockExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CORBAServer/CorbaIOException:1.0"))
                    throw CORBAServer.CorbaIOExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CORBAServer/CorbaInterruptedException:1.0"))
                    throw CORBAServer.CorbaInterruptedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return exchange (cID, bItemID, bNumItems, dItemID, dNumItems        );
            } finally {
                _releaseReply ($in);
            }
  } // exchange

  public CORBAServer.Stock_s[] checkStock (int itemID) throws CORBAServer.CorbaIOException, CORBAServer.CorbaInetAddressException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("checkStock", true);
                $out.write_long (itemID);
                $in = _invoke ($out);
                CORBAServer.Stock_s $result[] = CORBAServer.StockHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:CORBAServer/CorbaIOException:1.0"))
                    throw CORBAServer.CorbaIOExceptionHelper.read ($in);
                else if (_id.equals ("IDL:CORBAServer/CorbaInetAddressException:1.0"))
                    throw CORBAServer.CorbaInetAddressExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return checkStock (itemID        );
            } finally {
                _releaseReply ($in);
            }
  } // checkStock

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CORBAServer/RetailStore:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init (args, props).string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     String str = org.omg.CORBA.ORB.init (args, props).object_to_string (this);
     s.writeUTF (str);
  }
} // class _RetailStoreStub
